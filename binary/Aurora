4#!/system/bin/sh
ARCH=$(uname -m)
SPATH=$(dirname "$(readlink -f "$0")")
time=$(date +"[%Z %Y-%m-%d %H:%M:%S]")
source /data/adb/modules/Aurora/config/Aurora.ini
export PATH="${KPATH}:$(magisk --path)/.magisk/busybox:/data/adb/ksu/bin:$PATH"
battery_level="$(echo "$(dumpsys battery)" | egrep 'level: ' | sed -n 's/.*level: //g;$p')"
intranet[${#intranet[@]}]=$(ip address | grep -w inet | grep -v 127 | awk '{print $2}')
intranet6[${#intranet6[@]}]=$(ip address | grep -w inet6 | grep -v ::1 | grep -v fe80 | awk '{print $2}')

log(){

  case "$1" in
    warn)
      echo "${time} - Aurora: $2" >> ${Services}
      ;;
    end)
      echo -e "\033[1;36m${time} - Aurora: $2\033[0m"
      ;;
    info)
      log end "$2" ; log warn "$2" ; log tern "$2"
      ;;
    tern)
      sed -i "s/version=.*/version=${time}/g" ${MODPATH}/module.prop > /dev/null 2>&1 ; sed -i "s/description=.*/description=$2./g" ${MODPATH}/module.prop > /dev/null 2>&1
      ;;
    debug)
      su -lp 2000 -c "cmd notification post -S messaging --conversation '${ARCH}' --message 'Aurora':'$2' 'Tag' '$(echo $RANDOM)'" > /dev/null 2>&1 ; log info "$2"
      ;;
  esac

}

start_bin() {

  if [ -f "${KPATH}/${bin_name}" ] ; then
    ulimit -SHn 1000000
    mkdir -p ${DATADIR} && Aurora set
    ln -sf ${MODPATH} ${DATADIR}
    ln -sf ${config_path}/${bin_name} ${template}
    if [ "${bin_name}" = "clash" ] ; then
      if [ -f ${template} ] && clash -t -d ${DATADIR} > ${DATADIR}/Check.log 2>&1 ; then
        nohup setuidgid root:net_admin clash -d ${DATADIR} -f ${template} > ${DATADIR}/${ARCH}.log &
      else
        log debug "“${bin_name}” does not work properly"
        return 1
      fi
    elif [ "${bin_name}" = "sing-box" ] ; then
      if [ -f ${template} ] && sing-box check -D ${DATADIR} > ${DATADIR}/Check.log 2>&1 ; then
        nohup setuidgid root:net_admin sing-box run -D ${DATADIR} -c box.json > ${DATADIR}/${ARCH}.log &
      else
        log debug "“${bin_name}” does not work properly"
        return 1
      fi
    else
      log debug "Unsupported kernel: “${bin_name}”"
      return 1
    fi
  fi

}

dns_server() {

  if [ "${bin_dns}" = "mosdns" ] && [ -f "${SPATH}/mosdns" ] ; then
    ln -sf ${config_path}/dns ${DATADIR}/config.yaml
    if [ "$1" = "true" ] ; then
      ulimit -SHn 1000000
      nohup setuidgid root:dns mosdns start -d ${DATADIR} > /dev/null 2>&1 &
    elif [ "$1" = "false" ] && pid=$(pidof mosdns 2>/dev/null) ; then
      kill -15 ${pid} && rm -f ${DATADIR}/config.yaml
      rm -f ${DATADIR}/dns.log > /dev/null 2>&1
    fi
  fi

}

nas_server() {

  if [ "${bin_nas}" = "Alist" ] && [ -f "${SPATH}/Alist" ] ; then
    mkdir -p ${mount_path}
    ln -sf ${config_path}/mount ${mount_path}/config.json
    if [ "$1" = "true" ] ; then
      ulimit -SHn 1000000
      nohup setuidgid root:mount Alist server --data ${mount_path} > /dev/null 2>&1 &
    elif [ "$1" = "false" ] && pid=$(pidof Alist 2>/dev/null) ; then
      kill -15 ${pid} && rm -f ${mount_path}/config.json
      rm -f ${DATADIR}/mount.log > /dev/null 2>&1
    fi
  fi

}

updateFile() {

  mv -f $1 $1.bak
  echo "curl -L -A 'clash' $2 -o $1"
  wget --no-check-certificate -U clash -O $1 $2 2>&1

  sleep 1

  if [ -f "$1" ]; then
    rm -f $1.bak
    log info "success: $1"
  else
    mv $1.bak $1
    log info "error: $1"
    return 1
  fi

}

updata_server() {

  if [ ${updateYacd} == "true" ]; then
    updateFile ${Yacd} ${Yacd_url}
    if [ -f "${Yacd}" ] ; then
      unzip -d ${DATADIR}/ ${Yacd}
      if [ -f "${DATADIR}/metacubexd-gh-pages/sw.js" ] ; then
        rm -rf ${Dashboard} && mv ${DATADIR}/metacubexd-gh-pages ${Dashboard} && rm -f ${Yacd}
      fi
    fi
  fi

  if [ ${updateClash} == "true" ]; then
    wget -q $(curl -s https://api.github.com/repos/clashCubeX/Clash.clash/releases/tags/Prerelease-Alpha | grep "download/Prerelease-Alpha/clash.meta-android-arm64-cgo-alpha" | cut -d : -f 2,3 | tr -d \") -O ${DATADIR}/clash.gz && gzip -d ${DATADIR}/clash.gz && chmod 0755 ${DATADIR}/clash && ${DATADIR}/clash -v && log info "success: ${DATADIR}/clash"
  fi

  if [ ${updateMmdb} == "true" ]; then
    updateFile ${Mmdb} ${Mmdb_url}
  fi

  if [ ${updateGeoSite} == "true" ]; then
    updateFile ${GeoSite_file} ${GeoSite_url}
  fi

  if [ ${updateGeoIP} == "true" ]; then
    updateFile ${GeoIP_file} ${GeoIP_url}
  fi

  rm -f ${MODPATH}/updata

}

start_redirect() {

  ${iptables} -t nat -N AURORA_EXTERNAL
  ${iptables} -t nat -F AURORA_EXTERNAL
  ${iptables} -t nat -N AURORA_LOCAL
  ${iptables} -t nat -F AURORA_LOCAL

  if [ "${bin_name}" = "clash" ] ; then
    ${iptables} -t nat -A AURORA_EXTERNAL -p udp --dport 53 -j REDIRECT --to-ports ${dns_port}
    ${iptables} -t nat -A AURORA_LOCAL -p udp --dport 53 -j REDIRECT --to-ports $dns_port}
    ${iptables} -t nat -A AURORA_EXTERNAL -d ${fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
    ${iptables} -t nat -A AURORA_LOCAL -d ${fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
  fi

  for subnet in ${intranet[@]} ; do
    ${iptables} -t nat -A AURORA_EXTERNAL -d ${subnet} -j RETURN
    ${iptables} -t nat -A AURORA_LOCAL -d ${subnet} -j RETURN
  done

  ${iptables} -t nat -A AURORA_EXTERNAL -p tcp -i lo -j REDIRECT --to-ports ${redir_port}

  if [ "${ap_list}" != "" ] ; then
    for ap in ${ap_list[@]} ; do
      ${iptables} -t nat -A AURORA_EXTERNAL -p tcp -i ${ap} -j REDIRECT --to-ports ${redir_port}
    done
  fi

  ${iptables} -t nat -I PREROUTING -j AURORA_EXTERNAL

  ${iptables} -t nat -I AURORA_LOCAL -m owner --uid-owner ${kernel_group} --gid-owner ${kernel_group} -j RETURN

  ${iptables} -t nat -A AURORA_LOCAL -p tcp -j REDIRECT --to-ports ${redir_port}

  ${iptables} -t nat -I OUTPUT -j AURORA_LOCAL

  ${iptables} -A OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner ${kernel_group} --gid-owner ${kernel_group} -m tcp --dport ${redir_port} -j REJECT
}

stop_redirect() {

  ${iptables} -t nat -D PREROUTING -j AURORA_EXTERNAL

  ${iptables} -t nat -D OUTPUT -j AURORA_LOCAL

  ${iptables} -D OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner ${kernel_user} --gid-owner ${kernel_group} -m tcp --dport ${redir_port} -j REJECT
  ${iptables} -D OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${redir_port} -j REJECT

  ${iptables} -t nat -F AURORA_EXTERNAL
  ${iptables} -t nat -X AURORA_EXTERNAL
  ${iptables} -t nat -F AURORA_LOCAL
  ${iptables} -t nat -X AURORA_LOCAL

}

forward() {

 iptables -w 100 $1 FORWARD -o ${tun_device} -j ACCEPT
 iptables -w 100 $1 FORWARD -i ${tun_device} -j ACCEPT
 ip6tables -w 100 $1 FORWARD -o ${tun_device} -j ACCEPT
 ip6tables -w 100 $1 FORWARD -i ${tun_device} -j ACCEPT

}

start_tproxy() {

  if [ "${iptables}" = "ip6tables -w 100" ] ; then
    ip -6 rule add fwmark 222 table 222 pref 222
    ip -6 route add local default dev lo table 222
  else
    ip rule add fwmark 222 table 222 pref 222
    ip route add local default dev lo table 222
  fi

  ${iptables} -t mangle -N AURORA_EXTERNAL
  ${iptables} -t mangle -F AURORA_EXTERNAL

  if [ "${bin_name}" = "clash" ] ; then
    if [ "${iptables}" = "ip6tables -w 100" ] ; then
      ${iptables} -t mangle -A AURORA_EXTERNAL -p udp --dport 53 -j RETURN
      for subnet6 in ${intranet6[@]}; do
        ${iptables} -t mangle -A AURORA_EXTERNAL -d ${subnet6} -j RETURN
      done
    else
      ${iptables} -t mangle -A AURORA_EXTERNAL -p udp --dport 53 -j RETURN
      for subnet in ${intranet[@]} ; do
        ${iptables} -t mangle -A AURORA_EXTERNAL -d ${subnet} -j RETURN
      done
    fi
  else
    if [ "${iptables}" = "ip6tables -w 100" ] ; then
      for subnet6 in ${intranet6[@]} ; do
        ${iptables} -t mangle -A AURORA_EXTERNAL -d ${subnet6} -p udp ! --dport 53 -j RETURN
        ${iptables} -t mangle -A AURORA_EXTERNAL -d ${subnet6} ! -p udp -j RETURN
      done
    else
      for subnet in ${intranet[@]} ; do
        ${iptables} -t mangle -A AURORA_EXTERNAL -d ${subnet} -p udp ! --dport 53 -j RETURN
        ${iptables} -t mangle -A AURORA_EXTERNAL -d ${subnet} ! -p udp -j RETURN
      done
    fi
  fi

  ${iptables} -t mangle -A AURORA_EXTERNAL -p tcp -i lo -j TPROXY --on-port ${tproxy_port} --tproxy-mark 222
  ${iptables} -t mangle -A AURORA_EXTERNAL -p udp -i lo -j TPROXY --on-port ${tproxy_port} --tproxy-mark 222

  if [ "${ap_list}" != "" ] ; then
    for ap in ${ap_list[@]} ; do
      ${iptables} -t mangle -A AURORA_EXTERNAL -p tcp -i ${ap} -j TPROXY --on-port ${tproxy_port} --tproxy-mark 222
      ${iptables} -t mangle -A AURORA_EXTERNAL -p udp -i ${ap} -j TPROXY --on-port ${tproxy_port} --tproxy-mark 222
    done
  fi

  ${iptables} -t mangle -I PREROUTING -j AURORA_EXTERNAL

  ${iptables} -t mangle -N AURORA_LOCAL
  ${iptables} -t mangle -F AURORA_LOCAL

  if [ "${bin_name}" = "clash" ] ; then
    if [ "${iptables}" = "ip6tables -w 100" ] ; then
      ${iptables} -t mangle -A AURORA_LOCAL -p udp --dport 53 -j RETURN
      for subnet6 in ${intranet6[@]} ; do
        ${iptables} -t mangle -A AURORA_LOCAL -d ${subnet6} -j RETURN
      done
    else
      ${iptables} -t mangle -A AURORA_LOCAL -p udp --dport 53 -j RETURN
      for subnet in ${intranet[@]} ; do
        ${iptables} -t mangle -A AURORA_LOCAL -d ${subnet} -j RETURN
      done
    fi
  else
    if [ "${iptables}" = "ip6tables -w 100" ] ; then
      for subnet6 in ${intranet6[@]} ; do
        ${iptables} -t mangle -A AURORA_LOCAL -d ${subnet6} -p udp ! --dport 53 -j RETURN
        ${iptables} -t mangle -A AURORA_LOCAL -d ${subnet6} ! -p udp -j RETURN
      done
    else
      for subnet in ${intranet[@]} ; do
        ${iptables} -t mangle -A AURORA_LOCAL -d ${subnet} -p udp ! --dport 53 -j RETURN
        ${iptables} -t mangle -A AURORA_LOCAL -d ${subnet} ! -p udp -j RETURN
      done
    fi
  fi

  ${iptables} -t mangle -I AURORA_LOCAL -m owner --uid-owner ${kernel_user} --gid-owner ${kernel_group} -j RETURN

  ${iptables} -t mangle -A AURORA_LOCAL -p tcp -j MARK --set-mark 222
  ${iptables} -t mangle -A AURORA_LOCAL -p udp -j MARK --set-mark 222

  ${iptables} -t mangle -I OUTPUT -j AURORA_LOCAL

  ${iptables} -t mangle -N DIVERT
  ${iptables} -t mangle -F DIVERT

  ${iptables} -t mangle -A DIVERT -j MARK --set-mark 222
  ${iptables} -t mangle -A DIVERT -j ACCEPT

  ${iptables} -t mangle -I PREROUTING -p tcp -m socket -j DIVERT

  if [ "${iptables}" = "ip6tables -w 100" ] ; then
    ${iptables} -A OUTPUT -d ::1 -p tcp -m owner --uid-owner ${kernel_user} --gid-owner ${kernel_group} -m tcp --dport ${tproxy_port} -j REJECT
  else
    ${iptables} -A OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner ${kernel_user} --gid-owner ${kernel_group} -m tcp --dport ${tproxy_port} -j REJECT
  fi

  if [ "${bin_name}" = "clash" ] && [ "${iptables}" = "iptables -w 100" ] ; then
    ${iptables} -t nat -N DNS_EXTERNAL
    ${iptables} -t nat -F DNS_EXTERNAL

    ${iptables} -t nat -A DNS_EXTERNAL -p udp --dport 53 -j REDIRECT --to-ports ${dns_port}

    ${iptables} -t nat -I PREROUTING -j DNS_EXTERNAL

    ${iptables} -t nat -N DNS_LOCAL
    ${iptables} -t nat -F DNS_LOCAL

    ${iptables} -t nat -A DNS_LOCAL -m owner --uid-owner ${kernel_user} --gid-owner ${kernel_group} -j RETURN

    ${iptables} -t nat -A DNS_LOCAL -p udp --dport 53 -j REDIRECT --to-ports ${dns_port}

    ${iptables} -t nat -I OUTPUT -j DNS_LOCAL

    ${iptables} -t nat -I OUTPUT -d ${fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
    ${iptables} -t nat -I PREROUTING -d ${fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
  fi

}

stop_tproxy() {

  if [ "${iptables}" = "ip6tables -w 100" ] ; then
    ip -6 rule del fwmark 222 table 222
    ip -6 route flush table 222
  else
    ip rule del fwmark 222 table 222
    ip route flush table 222
  fi

  ${iptables} -t mangle -D PREROUTING -j AURORA_EXTERNAL

  ${iptables} -t mangle -D PREROUTING -p tcp -m socket -j DIVERT

  ${iptables} -t mangle -D OUTPUT -j AURORA_LOCAL

  ${iptables} -t mangle -F AURORA_EXTERNAL
  ${iptables} -t mangle -X AURORA_EXTERNAL

  ${iptables} -t mangle -F AURORA_LOCAL
  ${iptables} -t mangle -X AURORA_LOCAL

  ${iptables} -t mangle -F DIVERT
  ${iptables} -t mangle -X DIVERT

  if [ "${iptables}" = "ip6tables -w 100" ] ; then
    ${iptables} -D OUTPUT -d ::1 -p tcp -m owner --uid-owner ${kernel_user} --gid-owner ${kernel_group} -m tcp --dport ${tproxy_port} -j REJECT
    ${iptables} -D OUTPUT -d ::1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${tproxy_port} -j REJECT
  else
    ${iptables} -D OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner ${kernel_user} --gid-owner ${kernel_group} -m tcp --dport ${tproxy_port} -j REJECT
    ${iptables} -D OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${tproxy_port} -j REJECT
  fi

  iptables="iptables -w 100"
  ${iptables} -t nat -D PREROUTING -j DNS_EXTERNAL

  ${iptables} -t nat -D OUTPUT -j DNS_LOCAL

  ${iptables} -t nat -F DNS_EXTERNAL
  ${iptables} -t nat -X DNS_EXTERNAL

  ${iptables} -t nat -F DNS_LOCAL
  ${iptables} -t nat -X DNS_LOCAL

  ${iptables} -t nat -D OUTPUT -d ${fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
  ${iptables} -t nat -D PREROUTING -d ${fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1

}

case "$1" in
  a)
    if [ "${iptables_status}" == "Tun" ]; then
      mkdir -p /dev/net
      [ ! -L /dev/net/tun ] && ln -sf /dev/tun /dev/net/tun
      ifconfig | grep -q ${tun_device} || return 1 && forward -I > /dev/null 2>&1
    elif [ "${iptables_status}" = "Mixed" ] ; then
      ifconfig | grep -q ${tun_device} || return 1 && forward -I > /dev/null 2>&1
      iptables="iptables -w 100" && start_redirect > /dev/null 2>&1
    elif [ "${iptables_status}" = "TProxy" ] ; then
      iptables="iptables -w 100" && start_tproxy > /dev/null 2>&1
      if [ "${ipv6}" = "true" ] ; then
        iptables="ip6tables -w 100" && start_tproxy > /dev/null 2>&1
      fi
    fi
    Aurora ipv6 ${ipv6} > /dev/null 2>&1
    log info "iPTables rules loaded"
    ;;
  e)
    if [ "${iptables_status}" == "Tun" ]; then
      forward -D > /dev/null 2>&1
    elif [ "${iptables_status}" = "Mixed" ] ; then
      forward -D > /dev/null 2>&1
      iptables="iptables -w 100" && stop_redirect > /dev/null 2>&1
    elif [ "${iptables_status}" = "TProxy" ] ; then
      iptables="iptables -w 100" && stop_tproxy > /dev/null 2>&1
      if [ "${ipv6}" = "true" ] ; then
        iptables="ip6tables -w 100" && stop_tproxy > /dev/null 2>&1
      fi
    fi
    Aurora ipv6 true > /dev/null 2>&1
    log info "iPTables rules cleared"
    ;;
  s)
    if start_bin && Aurora a ; then
      rm -f ${DATADIR}/Check.log
      log debug "Kernel “${bin_name}” service is running"
    else
      log debug "Kernel “${bin_name}” not Started"
      return 1
    fi
    ;;
  k)
    Aurora e && kill -15 ${bin_pid} || killall -15 ${bin_name}
    rm -f ${template} > /dev/null 2>&1
    rm -f ${DATADIR}/${ARCH}.log > /dev/null 2>&1
    log debug "stopping “${bin_name}” service"
    ;;
  ipv6)
    if [ "$2" = "false" ] && [ "${apn_ipv6}" = "false" ] ; then
      echo 0 > /proc/sys/net/ipv6/conf/all/accept_ra
      echo 0 > /proc/sys/net/ipv6/conf/wlan0/accept_ra
      echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
      echo 1 > /proc/sys/net/ipv6/conf/default/disable_ipv6
      echo 1 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
    elif [ "$2" = "true" ] && [ "${apn_ipv6}" = "true" ] ; then
      echo 1 > /proc/sys/net/ipv6/conf/all/accept_ra
      echo 1 > /proc/sys/net/ipv6/conf/wlan0/accept_ra
      echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6
      echo 0 > /proc/sys/net/ipv6/conf/default/disable_ipv6
      echo 0 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
      log info "iPV6Network: $2"
    fi
    ;;
  script)
    if [ "${script_run}" = "true" ] ; then
      if [ "${charge_control}" = "true" ] ; then
        if [ "${battery_level}" = "98" ] && [ "$(cat ${battery_path})" = "0" ] ; then
          echo 1 > ${battery_path} && log warn "Trigger quantitative stop charging"
        elif [ "${battery_level}" = "86" ] && [ "$(cat ${battery_path})" = "1" ] ; then
          echo 0 > ${battery_path} && log warn "End quantitative stop charging"
        fi
      elif [ "${charge_control}" = "false" ] ; then
        if [ "${battery_level}" != "100" ] && [ "$(cat ${battery_path})" = "1" ] ; then
        echo 0 > ${battery_path} && log warn "End quantitative stop charging"
        fi
      fi
    fi
    ;;
  tpre)
    Aurora e && Aurora a
    ;;
  dns)
    dns_server $2
    ;;
  nas)
    nas_server $2
    ;;
  updata)
    updata_server > /dev/null 2>&1
    ;;
  upx)
    chmod 300 ${DATADIR}/$2
    setuidgid root:system upx --best ${DATADIR}/$2
    log info "OCUPX “$2” ${ARCH}"
    ;;
  test)
    echo "${time}" ; echo "Battery level: ${battery_level}" ; echo "ARCH: ${ARCH}" ; echo "SPATH: ${SPATH}" ; echo "Bin Name: ${bin_name}" ; echo "Bin Pid: ${bin_pid}" ; echo "DNS Port: ${dns_port}" ; echo "TProxy Port: ${tproxy_port}" ; echo "Mixed Port: ${mixed_port}" ; echo "Fake iP Range: ${fake_ip_range}" ; echo "HOSTNAME: $(getprop net.hostname)" ; echo "Kernel User: ${kernel_user}" ; echo "Kernel Group: ${kernel_group}" ; echo "CPU OCCUPY: $((/system/bin/ps -eo %CPU,NAME | grep ${bin_name} | awk '{print $1"%"}') 2> /dev/null || dumpsys cpuinfo | grep ${bin_name} | awk '{print $1}')" ; echo "intranet: ${intranet[@]}" ; echo "intranet6: ${intranet6[@]}" ; echo "variate: $PATH"
    ;;
  net)
    if [ "$2" = "false" ]; then
      settings put global airplane_mode_on 1 > /dev/null 2>&1 && am broadcast -a android.intent.action.AIRPLANE_MODE --ez state true > /dev/null 2>&1
    elif [ "$2" = "true" ] ; then
      settings put global airplane_mode_on 0 > /dev/null 2>&1 && am broadcast -a android.intent.action.AIRPLANE_MODE --ez state false > /dev/null 2>&1
    fi
    ;;
  backup)
    rm -rf ${bakeup_path} && mkdir -p ${bakeup_path}
    cp ${DATADIR}/*.dat ${bakeup_path}
    cp ${KPATH}/${bin_name} ${bakeup_path}
    cp ${SPATH}/Aurora ${bakeup_path}/Aurora.sh
    cp -r ${Dashboard} ${bakeup_path}
    cp -r ${mount_path} ${bakeup_path}
    cp -r ${MODPATH}/config ${bakeup_path}
    ;;
  set)
    chown 0:3005 ${KPATH}/* && chmod 7755 ${KPATH}/*
    chown 0:1000 ${config_path}/* && chmod 1770 ${config_path}/*
    chown 0:3005 ${Dashboard}/* && chmod 500 ${Dashboard}/*
    chown 0:3005 ${Dashboard}/*/* && chmod 500 ${Dashboard}/*/*
    chown 0:2 ${config_path}/inotify && chown 0:0 ${config_path}/root
    chmod 7110 ${config_path}/inotify && chmod 440 ${config_path}/root
    ;;
  start)
    echo "${time} - Aurora: Mount path: '${SPATH}' ; ARCH: '${ARCH}'" > ${Services}
    setprop net.hostname "Aurora" > /dev/null 2>&1 && Aurora set
    settings put global ntp_server time.asia.apple.com > /dev/null 2>&1
    nohup inotifyd ${config_path}/inotify ${MODPATH}/ > /dev/null 2>&1 &
    nohup crond -c ${MODPATH}/config > /dev/null 2>&1 &
    dns_server true > /dev/null 2>&1 ; nas_server true > /dev/null 2>&1
    Aurora s > /dev/null 2>&1 && Aurora script > /dev/null 2>&1
    ;;
  *)
    log end "'$1' Usage: s|net|dns|nas|upx|tpre|updata"
    return 1
    ;;
esac