#!/system/bin/sh
export PATH="$(magisk --path)/.magisk/busybox:$PATH:/system/bin"
source /data/adb/Aurora/Providers/Aurora.ini

function notification(){

local title="${2}"
local text="${1}"

 test -z "${title}" && title='Aurora'

su -lp 2000 -c "cmd notification post -S messaging --conversation '${title}' --message '${title}':'${text}' 'Tag' '$(echo $RANDOM)' " >/dev/null 2>&1

}

start_redirect() {

  ${iptables} -t nat -N AURORA_EXTERNAL
  ${iptables} -t nat -F AURORA_EXTERNAL
  ${iptables} -t nat -N AURORA_LOCAL
  ${iptables} -t nat -F AURORA_LOCAL

  if [ "${bin_name}" = "clash" ] ; then
    ${iptables} -t nat -A AURORA_EXTERNAL -p udp --dport 53 -j REDIRECT --to-ports ${dns_port}
    ${iptables} -t nat -A AURORA_LOCAL -p udp --dport 53 -j REDIRECT --to-ports ${dns_port}
    ${iptables} -t nat -A AURORA_EXTERNAL -d ${fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
    ${iptables} -t nat -A AURORA_LOCAL -d ${fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
  fi

  for subnet in ${intranet[*]} ; do
    ${iptables} -t nat -A AURORA_EXTERNAL -d ${subnet} -j RETURN
    ${iptables} -t nat -A AURORA_LOCAL -d ${subnet} -j RETURN
  done

  ${iptables} -t nat -A AURORA_EXTERNAL -p tcp -i lo -j REDIRECT --to-ports ${redir_port}

  if [ "${ap_list}" != "" ] ; then
    for ap in ${ap_list[*]} ; do
      ${iptables} -t nat -A AURORA_EXTERNAL -p tcp -i ${ap} -j REDIRECT --to-ports ${redir_port}
    done
  fi
  ${iptables} -t nat -I PREROUTING -j AURORA_EXTERNAL

  ${iptables} -t nat -I AURORA_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN
  if [ "${ignore_out_list}" != "" ] ; then
    for ignore in ${ignore_out_list[*]} ; do
      ${iptables} -t nat -I AURORA_LOCAL -o ${ignore} -j RETURN
    done
  fi

  if [ "${proxy_mode}" = "blacklist" ] ; then
    if [ "${uid_list}" = "" ] ; then
      ${iptables} -t nat -A AURORA_LOCAL -p tcp -j REDIRECT --to-ports ${redir_port}
    else
      for appid in ${uid_list[*]} ; do
        ${iptables} -t nat -I AURORA_LOCAL -m owner --uid-owner ${appid} -j RETURN
      done
      ${iptables} -t nat -A AURORA_LOCAL -p tcp -j REDIRECT --to-ports ${redir_port}
    fi
  elif [ "${proxy_mode}" = "whitelist" ] ; then
    for appid in ${appid_list[*]} ; do
      ${iptables} -t nat -A AURORA_LOCAL -p tcp -m owner --uid-owner ${appid} -j REDIRECT --to-ports ${redir_port}
    done
    ${iptables} -t nat -A AURORA_LOCAL -p tcp -m owner --uid-owner 0 -j REDIRECT --to-ports ${redir_port}
    ${iptables} -t nat -A AURORA_LOCAL -p tcp -m owner --uid-owner 1052 -j REDIRECT --to-ports ${redir_port}
  else
    ${iptables} -t nat -A AURORA_LOCAL -p tcp -j REDIRECT --to-ports ${redir_port}
  fi

  ${iptables} -t nat -I OUTPUT -j AURORA_LOCAL
  ${iptables} -A OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${redir_port} -j REJECT
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables} -A OUTPUT -d ::1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${redir_port} -j REJECT
  fi

}

stop_redirect() {

  ${iptables} -t nat -D PREROUTING -j AURORA_EXTERNAL

  ${iptables} -t nat -D OUTPUT -j AURORA_LOCAL
  ${iptables} -D OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${redir_port} -j REJECT
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables} -D OUTPUT -d ::1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${redir_port} -j REJECT
  fi

  ${iptables} -t nat -F AURORA_EXTERNAL
  ${iptables} -t nat -X AURORA_EXTERNAL
  ${iptables} -t nat -F AURORA_LOCAL
  ${iptables} -t nat -X AURORA_LOCAL

}

forward() {

  ${iptables} $1 FORWARD -o ${tun_device} -j ACCEPT
  ${iptables} $1 FORWARD -i ${tun_device} -j ACCEPT
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables} $1 FORWARD -o ${tun_device} -j ACCEPT
    ${ip6tables} $1 FORWARD -i ${tun_device} -j ACCEPT
  fi

}

iPV6Network() {

  local netipv6="${1}"
  if [ "${netipv6}" = "false" ] ; then
    if [ "${apn_ipv6}" = "true" ] ; then
      notification "iPV6Network: ${netipv6}"
      sysctl -w net.ipv6.conf.all.accept_ra=0
      sysctl -w net.ipv6.conf.wlan0.accept_ra=0
      sysctl -w net.ipv6.conf.all.disable_ipv6=1
      sysctl -w net.ipv6.conf.default.disable_ipv6=1
      sysctl -w net.ipv6.conf.wlan0.disable_ipv6=1
    fi
    ${ip6tables} -I OUTPUT -p tcp --dport 53 -j REJECT
    ${ip6tables} -I OUTPUT -p udp --dport 53 -j REJECT
  else
    notification "iPV6Network: ${netipv6}"
    sysctl -w net.ipv6.conf.all.accept_ra=1
    sysctl -w net.ipv6.conf.wlan0.accept_ra=1
    sysctl -w net.ipv6.conf.all.disable_ipv6=0
    sysctl -w net.ipv6.conf.default.disable_ipv6=0
    sysctl -w net.ipv6.conf.wlan0.disable_ipv6=0
    ${ip6tables} -I OUTPUT -p tcp --dport 53 -j ACCEPT
    ${ip6tables} -I OUTPUT -p udp --dport 53 -j ACCEPT
  fi

}

start_tproxy() {

  ip rule add fwmark ${id} table ${id} pref ${id}
  ip route add local default dev lo table ${id}
  if [ "${ipv6}" = "true" ] ; then
    ip -6 rule add fwmark ${id} table ${id} pref ${id}
    ip -6 route add local default dev lo table ${id}
  fi

  ${iptables} -t mangle -N AURORA_EXTERNAL
  ${iptables} -t mangle -F AURORA_EXTERNAL
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables} -t mangle -N AURORA_EXTERNAL
    ${ip6tables} -t mangle -F AURORA_EXTERNAL
  fi

  ${iptables} -t mangle -I AURORA_EXTERNAL -i rmnet_data+ -j RETURN
  ${iptables} -t mangle -I AURORA_EXTERNAL -i ccmni+ -j RETURN
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables} -t mangle -I AURORA_EXTERNAL -i rmnet_data+ -j RETURN
    ${ip6tables} -t mangle -I AURORA_EXTERNAL -i ccmni+ -j RETURN
  fi

  if [ "${bin_name}" = "clash" ] ; then
    for subnet in ${intranet[*]} ; do
      ${iptables} -t mangle -A AURORA_EXTERNAL -d ${subnet} -j RETURN
    done
    if [ "${ipv6}" = "true" ] ; then
      for subnet6 in ${intranet6[*]} ; do
        ${ip6tables} -t mangle -A AURORA_EXTERNAL -d ${subnet6} -j RETURN
      done
    fi
  else
    for subnet in ${intranet[*]} ; do
      ${iptables} -t mangle -A AURORA_EXTERNAL -d ${subnet} -p udp ! --dport 53 -j RETURN
      ${iptables} -t mangle -A AURORA_EXTERNAL -d ${subnet} ! -p udp -j RETURN
    done
    if [ "${ipv6}" = "true" ] ; then
      for subnet6 in ${intranet6[*]} ; do
        ${ip6tables} -t mangle -A AURORA_EXTERNAL -d ${subnet6} -p udp ! --dport 53 -j RETURN
        ${ip6tables} -t mangle -A AURORA_EXTERNAL -d ${subnet6} ! -p udp -j RETURN
      done
    fi
  fi

  ${iptables} -t mangle -A AURORA_EXTERNAL -p tcp -i lo -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${id}
  ${iptables} -t mangle -A AURORA_EXTERNAL -p udp -i lo -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${id}
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables} -t mangle -A AURORA_EXTERNAL -p tcp -i lo -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${id}
    ${ip6tables} -t mangle -A AURORA_EXTERNAL -p udp -i lo -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${id}
  fi

  if [ "${ap_list}" != "" ] ; then
    for ap in ${ap_list[*]} ; do
      ${iptables} -t mangle -A AURORA_EXTERNAL -p tcp -i ${ap} -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${id}
      ${iptables} -t mangle -A AURORA_EXTERNAL -p udp -i ${ap} -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${id}
    done
  fi

  if [ "${ipv6}" = "true" ] ; then
    if [ "${ap_list}" != "" ] ; then
      for ap6 in ${ap_list[*]} ; do
        ${ip6tables} -t mangle -A AURORA_EXTERNAL -p tcp -i ${ap6} -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${id}
        ${ip6tables} -t mangle -A AURORA_EXTERNAL -p udp -i ${ap6} -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${id}
      done
    fi
  fi

  ${iptables} -t mangle -I PREROUTING -j AURORA_EXTERNAL

  ${iptables} -t mangle -N AURORA_LOCAL
  ${iptables} -t mangle -F AURORA_LOCAL
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables} -t mangle -I PREROUTING -j AURORA_EXTERNAL
    ${ip6tables} -t mangle -N AURORA_LOCAL
    ${ip6tables} -t mangle -F AURORA_LOCAL
  fi

  if [ "${ignore_out_list}" != "" ] ; then
    for ignore in ${ignore_out_list[*]} ; do
      ${iptables} -t mangle -I AURORA_LOCAL -o ${ignore} -j RETURN
    done
  fi

  if [ "${ipv6}" = "true" ] ; then
    if [ "${ignore_out_list}" != "" ] ; then
      for ignore6 in ${ignore_out_list[*]} ; do
        ${ip6tables} -t mangle -I AURORA_LOCAL -o ${ignore6} -j RETURN
      done
    fi
  fi

  if [ "${bin_name}" = "clash" ] ; then
    ${iptables} -t mangle -A AURORA_LOCAL -p udp --dport 53 -j RETURN
    for subnet in ${intranet[*]} ; do
      ${iptables} -t mangle -A AURORA_LOCAL -d ${subnet} -j RETURN
    done
    if [ "${ipv6}" = "true" ] ; then
      ${ip6tables} -t mangle -A AURORA_LOCAL -p udp --dport 53 -j RETURN
      for subnet6 in ${intranet6[*]} ; do
        ${ip6tables} -t mangle -A AURORA_LOCAL -d ${subnet6} -j RETURN
      done
    fi
  else
    for subnet in ${intranet[*]} ; do
      ${iptables} -t mangle -A AURORA_LOCAL -d ${subnet} -p udp ! --dport 53 -j RETURN
      ${iptables} -t mangle -A AURORA_LOCAL -d ${subnet} ! -p udp -j RETURN
    done
    if [ "${ipv6}" = "true" ] ; then
      for subnet6 in ${intranet6[*]} ; do
        ${ip6tables} -t mangle -A AURORA_LOCAL -d ${subnet6} -p udp ! --dport 53 -j RETURN
        ${ip6tables} -t mangle -A AURORA_LOCAL -d ${subnet6} ! -p udp -j RETURN
      done
    fi
  fi

  ${iptables} -t mangle -I AURORA_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables} -t mangle -I AURORA_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN
  fi

  if [ "${proxy_mode}" = "blacklist" ] ; then
    if [ "${uid_list}" = "" ] ; then
      ${iptables} -t mangle -A AURORA_LOCAL -p tcp -j MARK --set-mark ${id}
      ${iptables} -t mangle -A AURORA_LOCAL -p udp -j MARK --set-mark ${id}
      if [ "${ipv6}" = "true" ] ; then
        ${ip6tables} -t mangle -A AURORA_LOCAL -p tcp -j MARK --set-mark ${id}
        ${ip6tables} -t mangle -A AURORA_LOCAL -p udp -j MARK --set-mark ${id}
      fi
    else
      for appid in ${uid_list[*]} ; do
        ${iptables} -t mangle -I AURORA_LOCAL -m owner --uid-owner ${appid} -j RETURN
      done
      if [ "${ipv6}" = "true" ] ; then
        for appid in ${uid_list[*]} ; do
          ${ip6tables} -t mangle -I AURORA_LOCAL -m owner --uid-owner ${appid} -j RETURN
        done
      fi
      ${iptables} -t mangle -A AURORA_LOCAL -p tcp -j MARK --set-mark ${id}
      ${iptables} -t mangle -A AURORA_LOCAL -p udp -j MARK --set-mark ${id}
      if [ "${ipv6}" = "true" ] ; then
        ${ip6tables} -t mangle -A AURORA_LOCAL -p tcp -j MARK --set-mark ${id}
        ${ip6tables} -t mangle -A AURORA_LOCAL -p udp -j MARK --set-mark ${id}
      fi
    fi
  elif [ "${proxy_mode}" = "whitelist" ] ; then
    for appid in ${appid_list[*]} ; do
      ${iptables} -t mangle -A AURORA_LOCAL -p tcp -m owner --uid-owner ${appid} -j MARK --set-mark ${id}
      ${iptables} -t mangle -A AURORA_LOCAL -p udp -m owner --uid-owner ${appid} -j MARK --set-mark ${id}
    done
    if [ "${ipv6}" = "true" ] ; then
      for appid in ${appid_list[*]} ; do
        ${ip6tables} -t mangle -A AURORA_LOCAL -p tcp -m owner --uid-owner ${appid} -j MARK --set-mark ${id}
        ${ip6tables} -t mangle -A AURORA_LOCAL -p udp -m owner --uid-owner ${appid} -j MARK --set-mark ${id}
      done
    fi
    ${iptables} -t mangle -A AURORA_LOCAL -p tcp -m owner --uid-owner 0 -j MARK --set-mark ${id}
    ${iptables} -t mangle -A AURORA_LOCAL -p udp -m owner --uid-owner 0 -j MARK --set-mark ${id}
    ${iptables} -t mangle -A AURORA_LOCAL -p tcp -m owner --uid-owner 1052 -j MARK --set-mark ${id}
    ${iptables} -t mangle -A AURORA_LOCAL -p udp -m owner --uid-owner 1052 -j MARK --set-mark ${id}
    [ "${bin_name}" != "clash" ] && ${iptables} -t mangle -A AURORA_LOCAL -p udp --dport 53 -j MARK --set-mark ${id}
    if [ "${ipv6}" = "true" ] ; then
      ${ip6tables} -t mangle -A AURORA_LOCAL -p tcp -m owner --uid-owner 0 -j MARK --set-mark ${id}
      ${ip6tables} -t mangle -A AURORA_LOCAL -p udp -m owner --uid-owner 0 -j MARK --set-mark ${id}
      ${ip6tables} -t mangle -A AURORA_LOCAL -p tcp -m owner --uid-owner 1052 -j MARK --set-mark ${id}
      ${ip6tables} -t mangle -A AURORA_LOCAL -p udp -m owner --uid-owner 1052 -j MARK --set-mark ${id}
      [ "${bin_name}" != "clash" ] && ${ip6tables} -t mangle -A AURORA_LOCAL -p udp --dport 53 -j MARK --set-mark ${id}
    fi
  else
    ${iptables} -t mangle -A AURORA_LOCAL -p tcp -j MARK --set-mark ${id}
    ${iptables} -t mangle -A AURORA_LOCAL -p udp -j MARK --set-mark ${id}
    if [ "${ipv6}" = "true" ] ; then
      ${ip6tables} -t mangle -A AURORA_LOCAL -p tcp -j MARK --set-mark ${id}
      ${ip6tables} -t mangle -A AURORA_LOCAL -p udp -j MARK --set-mark ${id}
    fi
  fi

  ${iptables} -t mangle -I OUTPUT -j AURORA_LOCAL

  ${iptables} -t mangle -N DIVERT
  ${iptables} -t mangle -F DIVERT
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables} -t mangle -I OUTPUT -j AURORA_LOCAL
 
    ${ip6tables} -t mangle -N DIVERT
    ${ip6tables} -t mangle -F DIVERT
  fi

  ${iptables} -t mangle -A DIVERT -j MARK --set-mark ${id}
  ${iptables} -t mangle -A DIVERT -j ACCEPT
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables} -t mangle -A DIVERT -j MARK --set-mark ${id}
    ${ip6tables} -t mangle -A DIVERT -j ACCEPT
  fi

  ${iptables} -t mangle -I PREROUTING -p tcp -m socket -j DIVERT
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables} -t mangle -I PREROUTING -p tcp -m socket -j DIVERT
  fi

  ${iptables} -A OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${tproxy_port} -j REJECT
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables} -A OUTPUT -d ::1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${tproxy_port} -j REJECT
  fi

  if [ "${bin_name}" = "clash" ] ; then
    ${iptables} -t nat -N CLASH_DNS_EXTERNAL
    ${iptables} -t nat -F CLASH_DNS_EXTERNAL

    ${iptables} -t nat -A CLASH_DNS_EXTERNAL -p udp --dport 53 -j REDIRECT --to-ports ${dns_port}

    ${iptables} -t nat -I PREROUTING -j CLASH_DNS_EXTERNAL

    ${iptables} -t nat -N CLASH_DNS_LOCAL
    ${iptables} -t nat -F CLASH_DNS_LOCAL
    ${iptables} -t nat -A CLASH_DNS_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN
    ${iptables} -t nat -A CLASH_DNS_LOCAL -p udp --dport 53 -j REDIRECT --to-ports ${dns_port}

    ${iptables} -t nat -I OUTPUT -j CLASH_DNS_LOCAL

    ${iptables} -t nat -I OUTPUT -d ${fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
    ${iptables} -t nat -I PREROUTING -d ${fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
  fi

}

stop_tproxy() {

  ip rule del fwmark ${id} table ${id}
  ip route del local default dev lo table ${id}
  if [ "${ipv6}" = "true" ] ; then
    ip -6 rule del fwmark ${id} table ${id}
    ip -6 route del local default dev lo table ${id}
  fi

  ${iptables} -t mangle -D PREROUTING -j AURORA_EXTERNAL
  ${iptables} -t mangle -D PREROUTING -p tcp -m socket -j DIVERT

  ${iptables} -t mangle -D OUTPUT -j AURORA_LOCAL

  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables} -t mangle -D PREROUTING -j AURORA_EXTERNAL
    ${ip6tables} -t mangle -D PREROUTING -p tcp -m socket -j DIVERT

    ${ip6tables} -t mangle -D OUTPUT -j AURORA_LOCAL
  fi

  ${iptables} -t mangle -F AURORA_EXTERNAL
  ${iptables} -t mangle -X AURORA_EXTERNAL
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables} -t mangle -F AURORA_EXTERNAL
    ${ip6tables} -t mangle -X AURORA_EXTERNAL
  fi

  ${iptables} -t mangle -F AURORA_LOCAL
  ${iptables} -t mangle -X AURORA_LOCAL
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables} -t mangle -F AURORA_LOCAL
    ${ip6tables} -t mangle -X AURORA_LOCAL
  fi

  ${iptables} -t mangle -F DIVERT
  ${iptables} -t mangle -X DIVERT
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables} -t mangle -F DIVERT
    ${ip6tables} -t mangle -X DIVERT
  fi

  ${iptables} -D OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${tproxy_port} -j REJECT
  if [ "${ipv6}" = "true" ] ; then
    ${ip6tables} -D OUTPUT -d ::1 -p tcp -m owner --uid-owner 0 --gid-owner 3005 -m tcp --dport ${tproxy_port} -j REJECT
  fi

  ${iptables} -t nat -D PREROUTING -j CLASH_DNS_EXTERNAL

  ${iptables} -t nat -D OUTPUT -j CLASH_DNS_LOCAL

  ${iptables} -t nat -F CLASH_DNS_EXTERNAL
  ${iptables} -t nat -X CLASH_DNS_EXTERNAL

  ${iptables} -t nat -F CLASH_DNS_LOCAL
  ${iptables} -t nat -X CLASH_DNS_LOCAL

  ${iptables} -t nat -D OUTPUT -d ${fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
  ${iptables} -t nat -D PREROUTING -d ${fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1

}

tunst() {

  ip rule add fwmark ${id} lookup ${id}
  ip route add default dev ${tun_device} table ${id}
  if [ "${ipv6}" = "true" ] ; then
      ip -6 rule add fwmark ${id} table ${id}
      ip -6 route add default dev ${tun_device} table ${id}
  fi

   ${iptables} -t mangle -N AURORA_EXTERNAL
   ${iptables} -t mangle -N AURORA_LOCAL
  if [ "${ipv6}" = "true" ] ; then
     ${ip6tables} -t mangle -N AURORA_EXTERNAL
     ${ip6tables} -t mangle -N AURORA_LOCAL
  fi

  for subnet in ${intranet[*]} ; do
     ${iptables} -t mangle -A AURORA_EXTERNAL -d ${subnet} -j RETURN
  done
  if [ "${ipv6}" = "true" ] ; then
    for subnet6 in ${intranet6[*]} ; do
       ${ip6tables} -t mangle -A AURORA_EXTERNAL -d ${subnet6} -j RETURN
    done
  fi

   ${iptables} -t mangle -A AURORA_LOCAL -m owner --gid-owner 3005 -j RETURN
   ${iptables} -t mangle -A AURORA_EXTERNAL -j MARK --set-xmark ${id}
   ${iptables} -t mangle -I PREROUTING -j AURORA_EXTERNAL
  if [ "${ipv6}" = "true" ] ; then
     ${ip6tables} -t mangle -A AURORA_LOCAL -m owner --gid-owner 3005 -j RETURN
     ${ip6tables} -t mangle -A AURORA_EXTERNAL -j MARK --set-xmark ${id}
     ${ip6tables} -t mangle -I PREROUTING -j AURORA_EXTERNAL
  fi

  for subnet in ${intranet[*]} ; do
     ${iptables} -t mangle -A AURORA_LOCAL -d ${subnet} -j RETURN
  done
  if [ "${ipv6}" = "true" ] ; then
    for subnet6 in ${intranet6[*]} ; do
       ${ip6tables} -t mangle -A AURORA_LOCAL -d ${subnet6} -j RETURN
    done
  fi

   ${iptables} -t mangle -A AURORA_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN
   ${iptables} -t mangle -A AURORA_LOCAL -j MARK --set-xmark ${id}
   ${iptables} -t mangle -I OUTPUT -j AURORA_LOCAL
  if [ "${ipv6}" = "true" ] ; then
     ${ip6tables} -t mangle -A AURORA_LOCAL -m owner --uid-owner 0 --gid-owner 3005 -j RETURN
     ${ip6tables} -t mangle -A AURORA_LOCAL -j MARK --set-xmark ${id}
     ${ip6tables} -t mangle -I OUTPUT -j AURORA_LOCAL
  fi

}

del_tun() {

  ip rule del fwmark ${id} lookup ${id}
  ip route del default dev ${tun_device} table ${id}
  if [ "${ipv6}" = "true" ] ; then
      ip -6 rule del fwmark ${id} lookup ${id}
      ip -6 route del default dev ${tun_device} table ${id}
  fi

   ${iptables} -t mangle -D OUTPUT -j AURORA_LOCAL
   ${iptables} -t mangle -F AURORA_LOCAL
   ${iptables} -t mangle -X AURORA_LOCAL
  if [ "${ipv6}" = "true" ] ; then
     ${ip6tables} -t mangle -D OUTPUT -j AURORA_LOCAL
     ${ip6tables} -t mangle -F AURORA_LOCAL
     ${ip6tables} -t mangle -X AURORA_LOCAL
  fi

   ${iptables} -t mangle -D PREROUTING -j AURORA_EXTERNAL
   ${iptables} -t mangle -F AURORA_EXTERNAL
   ${iptables} -t mangle -X AURORA_EXTERNAL
  if [ "${ipv6}" = "true" ] ; then
     ${ip6tables} -t mangle -D PREROUTING -j AURORA_EXTERNAL
     ${ip6tables} -t mangle -F AURORA_EXTERNAL
     ${ip6tables} -t mangle -X AURORA_EXTERNAL
  fi

}

while getopts ":skd" signal ; do
    case ${signal} in
        s)
            if [ "${mixed_local}" = "true" ] ; then
              start_redirect >> /dev/null 2>&1
              forward -I >> /dev/null 2>&1
            else
              if [ "${tun_status}" = "true" ] ; then
                tunst >> /dev/null 2>&1
              elif [ "${tun_status}" = "false" ] ; then
                start_tproxy >> /dev/null 2>&1
              fi
            fi
            iPV6Network ${ipv6} >> /dev/null 2>&1
            notification 'IPTables规则已应用'
            ;;
        k)
            if [ "${mixed_local}" = "true" ] ; then
              stop_redirect >> /dev/null 2>&1
              forward -D >> /dev/null 2>&1
            else
              if [ "${tun_status}" = "true" ] ; then
                del_tun >> /dev/null 2>&1
              elif [ "${tun_status}" = "false" ] ; then
                stop_tproxy >> /dev/null 2>&1
              fi
            fi
            iPV6Network true >> /dev/null 2>&1
            notification 'IPTables规则已清空'
            ;;
        d)
            local IP6Table="${2}"
            iPV6Network ${IP6Table} >> /dev/null 2>&1
            notification "IP6Table: ${IP6Table}"
            ;;
        ?)
            echo error
            ;;
    esac
done